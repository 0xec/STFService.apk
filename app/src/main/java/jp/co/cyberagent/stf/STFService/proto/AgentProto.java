// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/agent.proto

package jp.co.cyberagent.stf.STFService.proto;

public final class AgentProto {
  private AgentProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code jp.co.cyberagent.stf.STFService.proto.InputAction}
   */
  public enum InputAction
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>KEYDOWN = 0;</code>
     */
    KEYDOWN(0, 0),
    /**
     * <code>KEYUP = 1;</code>
     */
    KEYUP(1, 1),
    /**
     * <code>KEYPRESS = 2;</code>
     */
    KEYPRESS(2, 2),
    /**
     * <code>TYPE = 3;</code>
     */
    TYPE(3, 3),
    /**
     * <code>WAKE = 4;</code>
     */
    WAKE(4, 4),
    ;

    /**
     * <code>KEYDOWN = 0;</code>
     */
    public static final int KEYDOWN_VALUE = 0;
    /**
     * <code>KEYUP = 1;</code>
     */
    public static final int KEYUP_VALUE = 1;
    /**
     * <code>KEYPRESS = 2;</code>
     */
    public static final int KEYPRESS_VALUE = 2;
    /**
     * <code>TYPE = 3;</code>
     */
    public static final int TYPE_VALUE = 3;
    /**
     * <code>WAKE = 4;</code>
     */
    public static final int WAKE_VALUE = 4;


    public final int getNumber() { return value; }

    public static InputAction valueOf(int value) {
      switch (value) {
        case 0: return KEYDOWN;
        case 1: return KEYUP;
        case 2: return KEYPRESS;
        case 3: return TYPE;
        case 4: return WAKE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<InputAction>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<InputAction>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<InputAction>() {
            public InputAction findValueByNumber(int number) {
              return InputAction.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return jp.co.cyberagent.stf.STFService.proto.AgentProto.getDescriptor().getEnumTypes().get(0);
    }

    private static final InputAction[] VALUES = values();

    public static InputAction valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private InputAction(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:jp.co.cyberagent.stf.STFService.proto.InputAction)
  }

  public interface InputEventOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .jp.co.cyberagent.stf.STFService.proto.InputAction action = 1;
    /**
     * <code>required .jp.co.cyberagent.stf.STFService.proto.InputAction action = 1;</code>
     */
    boolean hasAction();
    /**
     * <code>required .jp.co.cyberagent.stf.STFService.proto.InputAction action = 1;</code>
     */
    jp.co.cyberagent.stf.STFService.proto.AgentProto.InputAction getAction();

    // optional int32 keyCode = 2;
    /**
     * <code>optional int32 keyCode = 2;</code>
     */
    boolean hasKeyCode();
    /**
     * <code>optional int32 keyCode = 2;</code>
     */
    int getKeyCode();

    // optional bool shiftKey = 3;
    /**
     * <code>optional bool shiftKey = 3;</code>
     */
    boolean hasShiftKey();
    /**
     * <code>optional bool shiftKey = 3;</code>
     */
    boolean getShiftKey();

    // optional bool ctrlKey = 4;
    /**
     * <code>optional bool ctrlKey = 4;</code>
     */
    boolean hasCtrlKey();
    /**
     * <code>optional bool ctrlKey = 4;</code>
     */
    boolean getCtrlKey();

    // optional bool altKey = 5;
    /**
     * <code>optional bool altKey = 5;</code>
     */
    boolean hasAltKey();
    /**
     * <code>optional bool altKey = 5;</code>
     */
    boolean getAltKey();

    // optional bool metaKey = 6;
    /**
     * <code>optional bool metaKey = 6;</code>
     */
    boolean hasMetaKey();
    /**
     * <code>optional bool metaKey = 6;</code>
     */
    boolean getMetaKey();

    // optional bool symKey = 7;
    /**
     * <code>optional bool symKey = 7;</code>
     */
    boolean hasSymKey();
    /**
     * <code>optional bool symKey = 7;</code>
     */
    boolean getSymKey();

    // optional bool functionKey = 8;
    /**
     * <code>optional bool functionKey = 8;</code>
     */
    boolean hasFunctionKey();
    /**
     * <code>optional bool functionKey = 8;</code>
     */
    boolean getFunctionKey();

    // optional bool capsLockKey = 9;
    /**
     * <code>optional bool capsLockKey = 9;</code>
     */
    boolean hasCapsLockKey();
    /**
     * <code>optional bool capsLockKey = 9;</code>
     */
    boolean getCapsLockKey();

    // optional bool scrollLockKey = 10;
    /**
     * <code>optional bool scrollLockKey = 10;</code>
     */
    boolean hasScrollLockKey();
    /**
     * <code>optional bool scrollLockKey = 10;</code>
     */
    boolean getScrollLockKey();

    // optional bool numLockKey = 11;
    /**
     * <code>optional bool numLockKey = 11;</code>
     */
    boolean hasNumLockKey();
    /**
     * <code>optional bool numLockKey = 11;</code>
     */
    boolean getNumLockKey();

    // optional string text = 12;
    /**
     * <code>optional string text = 12;</code>
     */
    boolean hasText();
    /**
     * <code>optional string text = 12;</code>
     */
    java.lang.String getText();
    /**
     * <code>optional string text = 12;</code>
     */
    com.google.protobuf.ByteString
        getTextBytes();
  }
  /**
   * Protobuf type {@code jp.co.cyberagent.stf.STFService.proto.InputEvent}
   */
  public static final class InputEvent extends
      com.google.protobuf.GeneratedMessage
      implements InputEventOrBuilder {
    // Use InputEvent.newBuilder() to construct.
    private InputEvent(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private InputEvent(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final InputEvent defaultInstance;
    public static InputEvent getDefaultInstance() {
      return defaultInstance;
    }

    public InputEvent getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private InputEvent(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              jp.co.cyberagent.stf.STFService.proto.AgentProto.InputAction value = jp.co.cyberagent.stf.STFService.proto.AgentProto.InputAction.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                action_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              keyCode_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              shiftKey_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              ctrlKey_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              altKey_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              metaKey_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              symKey_ = input.readBool();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              functionKey_ = input.readBool();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              capsLockKey_ = input.readBool();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              scrollLockKey_ = input.readBool();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              numLockKey_ = input.readBool();
              break;
            }
            case 98: {
              bitField0_ |= 0x00000800;
              text_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return jp.co.cyberagent.stf.STFService.proto.AgentProto.internal_static_jp_co_cyberagent_stf_STFService_proto_InputEvent_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return jp.co.cyberagent.stf.STFService.proto.AgentProto.internal_static_jp_co_cyberagent_stf_STFService_proto_InputEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent.class, jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent.Builder.class);
    }

    public static com.google.protobuf.Parser<InputEvent> PARSER =
        new com.google.protobuf.AbstractParser<InputEvent>() {
      public InputEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InputEvent(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<InputEvent> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .jp.co.cyberagent.stf.STFService.proto.InputAction action = 1;
    public static final int ACTION_FIELD_NUMBER = 1;
    private jp.co.cyberagent.stf.STFService.proto.AgentProto.InputAction action_;
    /**
     * <code>required .jp.co.cyberagent.stf.STFService.proto.InputAction action = 1;</code>
     */
    public boolean hasAction() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .jp.co.cyberagent.stf.STFService.proto.InputAction action = 1;</code>
     */
    public jp.co.cyberagent.stf.STFService.proto.AgentProto.InputAction getAction() {
      return action_;
    }

    // optional int32 keyCode = 2;
    public static final int KEYCODE_FIELD_NUMBER = 2;
    private int keyCode_;
    /**
     * <code>optional int32 keyCode = 2;</code>
     */
    public boolean hasKeyCode() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 keyCode = 2;</code>
     */
    public int getKeyCode() {
      return keyCode_;
    }

    // optional bool shiftKey = 3;
    public static final int SHIFTKEY_FIELD_NUMBER = 3;
    private boolean shiftKey_;
    /**
     * <code>optional bool shiftKey = 3;</code>
     */
    public boolean hasShiftKey() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool shiftKey = 3;</code>
     */
    public boolean getShiftKey() {
      return shiftKey_;
    }

    // optional bool ctrlKey = 4;
    public static final int CTRLKEY_FIELD_NUMBER = 4;
    private boolean ctrlKey_;
    /**
     * <code>optional bool ctrlKey = 4;</code>
     */
    public boolean hasCtrlKey() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool ctrlKey = 4;</code>
     */
    public boolean getCtrlKey() {
      return ctrlKey_;
    }

    // optional bool altKey = 5;
    public static final int ALTKEY_FIELD_NUMBER = 5;
    private boolean altKey_;
    /**
     * <code>optional bool altKey = 5;</code>
     */
    public boolean hasAltKey() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool altKey = 5;</code>
     */
    public boolean getAltKey() {
      return altKey_;
    }

    // optional bool metaKey = 6;
    public static final int METAKEY_FIELD_NUMBER = 6;
    private boolean metaKey_;
    /**
     * <code>optional bool metaKey = 6;</code>
     */
    public boolean hasMetaKey() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool metaKey = 6;</code>
     */
    public boolean getMetaKey() {
      return metaKey_;
    }

    // optional bool symKey = 7;
    public static final int SYMKEY_FIELD_NUMBER = 7;
    private boolean symKey_;
    /**
     * <code>optional bool symKey = 7;</code>
     */
    public boolean hasSymKey() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool symKey = 7;</code>
     */
    public boolean getSymKey() {
      return symKey_;
    }

    // optional bool functionKey = 8;
    public static final int FUNCTIONKEY_FIELD_NUMBER = 8;
    private boolean functionKey_;
    /**
     * <code>optional bool functionKey = 8;</code>
     */
    public boolean hasFunctionKey() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bool functionKey = 8;</code>
     */
    public boolean getFunctionKey() {
      return functionKey_;
    }

    // optional bool capsLockKey = 9;
    public static final int CAPSLOCKKEY_FIELD_NUMBER = 9;
    private boolean capsLockKey_;
    /**
     * <code>optional bool capsLockKey = 9;</code>
     */
    public boolean hasCapsLockKey() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional bool capsLockKey = 9;</code>
     */
    public boolean getCapsLockKey() {
      return capsLockKey_;
    }

    // optional bool scrollLockKey = 10;
    public static final int SCROLLLOCKKEY_FIELD_NUMBER = 10;
    private boolean scrollLockKey_;
    /**
     * <code>optional bool scrollLockKey = 10;</code>
     */
    public boolean hasScrollLockKey() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bool scrollLockKey = 10;</code>
     */
    public boolean getScrollLockKey() {
      return scrollLockKey_;
    }

    // optional bool numLockKey = 11;
    public static final int NUMLOCKKEY_FIELD_NUMBER = 11;
    private boolean numLockKey_;
    /**
     * <code>optional bool numLockKey = 11;</code>
     */
    public boolean hasNumLockKey() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bool numLockKey = 11;</code>
     */
    public boolean getNumLockKey() {
      return numLockKey_;
    }

    // optional string text = 12;
    public static final int TEXT_FIELD_NUMBER = 12;
    private java.lang.Object text_;
    /**
     * <code>optional string text = 12;</code>
     */
    public boolean hasText() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional string text = 12;</code>
     */
    public java.lang.String getText() {
      java.lang.Object ref = text_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          text_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string text = 12;</code>
     */
    public com.google.protobuf.ByteString
        getTextBytes() {
      java.lang.Object ref = text_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        text_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      action_ = jp.co.cyberagent.stf.STFService.proto.AgentProto.InputAction.KEYDOWN;
      keyCode_ = 0;
      shiftKey_ = false;
      ctrlKey_ = false;
      altKey_ = false;
      metaKey_ = false;
      symKey_ = false;
      functionKey_ = false;
      capsLockKey_ = false;
      scrollLockKey_ = false;
      numLockKey_ = false;
      text_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasAction()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, action_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, keyCode_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, shiftKey_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, ctrlKey_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, altKey_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, metaKey_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, symKey_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(8, functionKey_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(9, capsLockKey_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(10, scrollLockKey_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(11, numLockKey_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBytes(12, getTextBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, action_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, keyCode_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, shiftKey_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, ctrlKey_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, altKey_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, metaKey_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, symKey_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, functionKey_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, capsLockKey_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, scrollLockKey_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, numLockKey_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(12, getTextBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code jp.co.cyberagent.stf.STFService.proto.InputEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return jp.co.cyberagent.stf.STFService.proto.AgentProto.internal_static_jp_co_cyberagent_stf_STFService_proto_InputEvent_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return jp.co.cyberagent.stf.STFService.proto.AgentProto.internal_static_jp_co_cyberagent_stf_STFService_proto_InputEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent.class, jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent.Builder.class);
      }

      // Construct using jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        action_ = jp.co.cyberagent.stf.STFService.proto.AgentProto.InputAction.KEYDOWN;
        bitField0_ = (bitField0_ & ~0x00000001);
        keyCode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        shiftKey_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        ctrlKey_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        altKey_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        metaKey_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        symKey_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        functionKey_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        capsLockKey_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        scrollLockKey_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        numLockKey_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        text_ = "";
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return jp.co.cyberagent.stf.STFService.proto.AgentProto.internal_static_jp_co_cyberagent_stf_STFService_proto_InputEvent_descriptor;
      }

      public jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent getDefaultInstanceForType() {
        return jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent.getDefaultInstance();
      }

      public jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent build() {
        jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent buildPartial() {
        jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent result = new jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.action_ = action_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.keyCode_ = keyCode_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.shiftKey_ = shiftKey_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.ctrlKey_ = ctrlKey_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.altKey_ = altKey_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.metaKey_ = metaKey_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.symKey_ = symKey_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.functionKey_ = functionKey_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.capsLockKey_ = capsLockKey_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.scrollLockKey_ = scrollLockKey_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.numLockKey_ = numLockKey_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.text_ = text_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent) {
          return mergeFrom((jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent other) {
        if (other == jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent.getDefaultInstance()) return this;
        if (other.hasAction()) {
          setAction(other.getAction());
        }
        if (other.hasKeyCode()) {
          setKeyCode(other.getKeyCode());
        }
        if (other.hasShiftKey()) {
          setShiftKey(other.getShiftKey());
        }
        if (other.hasCtrlKey()) {
          setCtrlKey(other.getCtrlKey());
        }
        if (other.hasAltKey()) {
          setAltKey(other.getAltKey());
        }
        if (other.hasMetaKey()) {
          setMetaKey(other.getMetaKey());
        }
        if (other.hasSymKey()) {
          setSymKey(other.getSymKey());
        }
        if (other.hasFunctionKey()) {
          setFunctionKey(other.getFunctionKey());
        }
        if (other.hasCapsLockKey()) {
          setCapsLockKey(other.getCapsLockKey());
        }
        if (other.hasScrollLockKey()) {
          setScrollLockKey(other.getScrollLockKey());
        }
        if (other.hasNumLockKey()) {
          setNumLockKey(other.getNumLockKey());
        }
        if (other.hasText()) {
          bitField0_ |= 0x00000800;
          text_ = other.text_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasAction()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (jp.co.cyberagent.stf.STFService.proto.AgentProto.InputEvent) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .jp.co.cyberagent.stf.STFService.proto.InputAction action = 1;
      private jp.co.cyberagent.stf.STFService.proto.AgentProto.InputAction action_ = jp.co.cyberagent.stf.STFService.proto.AgentProto.InputAction.KEYDOWN;
      /**
       * <code>required .jp.co.cyberagent.stf.STFService.proto.InputAction action = 1;</code>
       */
      public boolean hasAction() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .jp.co.cyberagent.stf.STFService.proto.InputAction action = 1;</code>
       */
      public jp.co.cyberagent.stf.STFService.proto.AgentProto.InputAction getAction() {
        return action_;
      }
      /**
       * <code>required .jp.co.cyberagent.stf.STFService.proto.InputAction action = 1;</code>
       */
      public Builder setAction(jp.co.cyberagent.stf.STFService.proto.AgentProto.InputAction value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        action_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .jp.co.cyberagent.stf.STFService.proto.InputAction action = 1;</code>
       */
      public Builder clearAction() {
        bitField0_ = (bitField0_ & ~0x00000001);
        action_ = jp.co.cyberagent.stf.STFService.proto.AgentProto.InputAction.KEYDOWN;
        onChanged();
        return this;
      }

      // optional int32 keyCode = 2;
      private int keyCode_ ;
      /**
       * <code>optional int32 keyCode = 2;</code>
       */
      public boolean hasKeyCode() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 keyCode = 2;</code>
       */
      public int getKeyCode() {
        return keyCode_;
      }
      /**
       * <code>optional int32 keyCode = 2;</code>
       */
      public Builder setKeyCode(int value) {
        bitField0_ |= 0x00000002;
        keyCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 keyCode = 2;</code>
       */
      public Builder clearKeyCode() {
        bitField0_ = (bitField0_ & ~0x00000002);
        keyCode_ = 0;
        onChanged();
        return this;
      }

      // optional bool shiftKey = 3;
      private boolean shiftKey_ ;
      /**
       * <code>optional bool shiftKey = 3;</code>
       */
      public boolean hasShiftKey() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool shiftKey = 3;</code>
       */
      public boolean getShiftKey() {
        return shiftKey_;
      }
      /**
       * <code>optional bool shiftKey = 3;</code>
       */
      public Builder setShiftKey(boolean value) {
        bitField0_ |= 0x00000004;
        shiftKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool shiftKey = 3;</code>
       */
      public Builder clearShiftKey() {
        bitField0_ = (bitField0_ & ~0x00000004);
        shiftKey_ = false;
        onChanged();
        return this;
      }

      // optional bool ctrlKey = 4;
      private boolean ctrlKey_ ;
      /**
       * <code>optional bool ctrlKey = 4;</code>
       */
      public boolean hasCtrlKey() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool ctrlKey = 4;</code>
       */
      public boolean getCtrlKey() {
        return ctrlKey_;
      }
      /**
       * <code>optional bool ctrlKey = 4;</code>
       */
      public Builder setCtrlKey(boolean value) {
        bitField0_ |= 0x00000008;
        ctrlKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool ctrlKey = 4;</code>
       */
      public Builder clearCtrlKey() {
        bitField0_ = (bitField0_ & ~0x00000008);
        ctrlKey_ = false;
        onChanged();
        return this;
      }

      // optional bool altKey = 5;
      private boolean altKey_ ;
      /**
       * <code>optional bool altKey = 5;</code>
       */
      public boolean hasAltKey() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool altKey = 5;</code>
       */
      public boolean getAltKey() {
        return altKey_;
      }
      /**
       * <code>optional bool altKey = 5;</code>
       */
      public Builder setAltKey(boolean value) {
        bitField0_ |= 0x00000010;
        altKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool altKey = 5;</code>
       */
      public Builder clearAltKey() {
        bitField0_ = (bitField0_ & ~0x00000010);
        altKey_ = false;
        onChanged();
        return this;
      }

      // optional bool metaKey = 6;
      private boolean metaKey_ ;
      /**
       * <code>optional bool metaKey = 6;</code>
       */
      public boolean hasMetaKey() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool metaKey = 6;</code>
       */
      public boolean getMetaKey() {
        return metaKey_;
      }
      /**
       * <code>optional bool metaKey = 6;</code>
       */
      public Builder setMetaKey(boolean value) {
        bitField0_ |= 0x00000020;
        metaKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool metaKey = 6;</code>
       */
      public Builder clearMetaKey() {
        bitField0_ = (bitField0_ & ~0x00000020);
        metaKey_ = false;
        onChanged();
        return this;
      }

      // optional bool symKey = 7;
      private boolean symKey_ ;
      /**
       * <code>optional bool symKey = 7;</code>
       */
      public boolean hasSymKey() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool symKey = 7;</code>
       */
      public boolean getSymKey() {
        return symKey_;
      }
      /**
       * <code>optional bool symKey = 7;</code>
       */
      public Builder setSymKey(boolean value) {
        bitField0_ |= 0x00000040;
        symKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool symKey = 7;</code>
       */
      public Builder clearSymKey() {
        bitField0_ = (bitField0_ & ~0x00000040);
        symKey_ = false;
        onChanged();
        return this;
      }

      // optional bool functionKey = 8;
      private boolean functionKey_ ;
      /**
       * <code>optional bool functionKey = 8;</code>
       */
      public boolean hasFunctionKey() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bool functionKey = 8;</code>
       */
      public boolean getFunctionKey() {
        return functionKey_;
      }
      /**
       * <code>optional bool functionKey = 8;</code>
       */
      public Builder setFunctionKey(boolean value) {
        bitField0_ |= 0x00000080;
        functionKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool functionKey = 8;</code>
       */
      public Builder clearFunctionKey() {
        bitField0_ = (bitField0_ & ~0x00000080);
        functionKey_ = false;
        onChanged();
        return this;
      }

      // optional bool capsLockKey = 9;
      private boolean capsLockKey_ ;
      /**
       * <code>optional bool capsLockKey = 9;</code>
       */
      public boolean hasCapsLockKey() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bool capsLockKey = 9;</code>
       */
      public boolean getCapsLockKey() {
        return capsLockKey_;
      }
      /**
       * <code>optional bool capsLockKey = 9;</code>
       */
      public Builder setCapsLockKey(boolean value) {
        bitField0_ |= 0x00000100;
        capsLockKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool capsLockKey = 9;</code>
       */
      public Builder clearCapsLockKey() {
        bitField0_ = (bitField0_ & ~0x00000100);
        capsLockKey_ = false;
        onChanged();
        return this;
      }

      // optional bool scrollLockKey = 10;
      private boolean scrollLockKey_ ;
      /**
       * <code>optional bool scrollLockKey = 10;</code>
       */
      public boolean hasScrollLockKey() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional bool scrollLockKey = 10;</code>
       */
      public boolean getScrollLockKey() {
        return scrollLockKey_;
      }
      /**
       * <code>optional bool scrollLockKey = 10;</code>
       */
      public Builder setScrollLockKey(boolean value) {
        bitField0_ |= 0x00000200;
        scrollLockKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool scrollLockKey = 10;</code>
       */
      public Builder clearScrollLockKey() {
        bitField0_ = (bitField0_ & ~0x00000200);
        scrollLockKey_ = false;
        onChanged();
        return this;
      }

      // optional bool numLockKey = 11;
      private boolean numLockKey_ ;
      /**
       * <code>optional bool numLockKey = 11;</code>
       */
      public boolean hasNumLockKey() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bool numLockKey = 11;</code>
       */
      public boolean getNumLockKey() {
        return numLockKey_;
      }
      /**
       * <code>optional bool numLockKey = 11;</code>
       */
      public Builder setNumLockKey(boolean value) {
        bitField0_ |= 0x00000400;
        numLockKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool numLockKey = 11;</code>
       */
      public Builder clearNumLockKey() {
        bitField0_ = (bitField0_ & ~0x00000400);
        numLockKey_ = false;
        onChanged();
        return this;
      }

      // optional string text = 12;
      private java.lang.Object text_ = "";
      /**
       * <code>optional string text = 12;</code>
       */
      public boolean hasText() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional string text = 12;</code>
       */
      public java.lang.String getText() {
        java.lang.Object ref = text_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          text_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string text = 12;</code>
       */
      public com.google.protobuf.ByteString
          getTextBytes() {
        java.lang.Object ref = text_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          text_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string text = 12;</code>
       */
      public Builder setText(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        text_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string text = 12;</code>
       */
      public Builder clearText() {
        bitField0_ = (bitField0_ & ~0x00000800);
        text_ = getDefaultInstance().getText();
        onChanged();
        return this;
      }
      /**
       * <code>optional string text = 12;</code>
       */
      public Builder setTextBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        text_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:jp.co.cyberagent.stf.STFService.proto.InputEvent)
    }

    static {
      defaultInstance = new InputEvent(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:jp.co.cyberagent.stf.STFService.proto.InputEvent)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_jp_co_cyberagent_stf_STFService_proto_InputEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_jp_co_cyberagent_stf_STFService_proto_InputEvent_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021proto/agent.proto\022%jp.co.cyberagent.st" +
      "f.STFService.proto\"\230\002\n\nInputEvent\022B\n\006act" +
      "ion\030\001 \002(\01622.jp.co.cyberagent.stf.STFServ" +
      "ice.proto.InputAction\022\017\n\007keyCode\030\002 \001(\005\022\020" +
      "\n\010shiftKey\030\003 \001(\010\022\017\n\007ctrlKey\030\004 \001(\010\022\016\n\006alt" +
      "Key\030\005 \001(\010\022\017\n\007metaKey\030\006 \001(\010\022\016\n\006symKey\030\007 \001" +
      "(\010\022\023\n\013functionKey\030\010 \001(\010\022\023\n\013capsLockKey\030\t" +
      " \001(\010\022\025\n\rscrollLockKey\030\n \001(\010\022\022\n\nnumLockKe" +
      "y\030\013 \001(\010\022\014\n\004text\030\014 \001(\t*G\n\013InputAction\022\013\n\007" +
      "KEYDOWN\020\000\022\t\n\005KEYUP\020\001\022\014\n\010KEYPRESS\020\002\022\010\n\004TY",
      "PE\020\003\022\010\n\004WAKE\020\004B\014B\nAgentProto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_jp_co_cyberagent_stf_STFService_proto_InputEvent_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_jp_co_cyberagent_stf_STFService_proto_InputEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_jp_co_cyberagent_stf_STFService_proto_InputEvent_descriptor,
              new java.lang.String[] { "Action", "KeyCode", "ShiftKey", "CtrlKey", "AltKey", "MetaKey", "SymKey", "FunctionKey", "CapsLockKey", "ScrollLockKey", "NumLockKey", "Text", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
