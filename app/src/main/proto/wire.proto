package jp.co.cyberagent.stf;

option java_outer_classname = "Wire";

enum RequestType {
  VERSION = 0;
  SET_KEYGUARD_STATE = 1;
  SET_WAKE_LOCK = 2;
  SET_CLIPBOARD = 3;
  GET_CLIPBOARD = 4;
  GET_BROWSERS = 5;
  GET_PROPERTIES = 6;
  IDENTIFY = 7;
	KEYEVENT = 8;
	TYPE = 9;
	WAKE = 10;
	SET_ROTATION = 11;
}

message RequestEnvelope {
	required RequestType type = 1;
	required bytes request = 2;
}

// Service

message VersionRequest {
}

message VersionResponse {
	required bool success = 1;
	optional string version = 2;
}

message SetKeyguardStateRequest {
  required bool enabled = 1;
}

message SetKeyguardStateResponse {
  required bool success = 1;
}

message SetWakeLockRequest {
  required bool enabled = 1;
}

message SetWakeLockResponse {
  required bool success = 1;
}

enum ClipboardType {
  TEXT = 1;
}

message SetClipboardRequest {
  required ClipboardType type = 1;
  optional string text = 2;
}

message SetClipboardResponse {
  required bool success = 1;
}

message GetClipboardRequest {
  required ClipboardType type = 1;
}

message GetClipboardResponse {
  required bool success = 1;
  optional ClipboardType type = 2;
  optional string text = 3;
}

message BrowserApp {
  required string name = 1;
  required string component = 2;
  required bool selected = 3;
  required bytes icon = 4;
}

message GetBrowsersRequest {
}

message GetBrowsersResponse {
  required bool success = 1;
  required bool selected = 2;
  repeated BrowserApp apps = 3;
}

message Property {
	required string name = 1;
	required string value = 2;
}

message GetPropertiesRequest {
	repeated string properties = 1;
}

message GetPropertiesResponse {
	required bool success = 1;
  repeated Property properties = 2;
}

message IdentifyRequest {
	required string serial = 1;
}

message IdentifyResponse {
	required bool success = 1;
}

// Agent

enum KeyEvent {
	DOWN = 0;
	UP = 1;
	PRESS = 2;
}

message KeyEventRequest {
	required KeyEvent event = 1;
	required int32 keyCode = 2;
	optional bool shiftKey = 3;
	optional bool ctrlKey = 4;
	optional bool altKey = 5;
	optional bool metaKey = 6;
	optional bool symKey = 7;
	optional bool functionKey = 8;
	optional bool capsLockKey = 9;
	optional bool scrollLockKey = 10;
	optional bool numLockKey = 11;
}

message TypeRequest {
	required string text = 1;
}

message SetRotationRequest {
	required int32 rotation = 1;
	required bool lock = 2;
}

message WakeRequest {
}
